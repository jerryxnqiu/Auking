"""
Django settings for auking project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import sys
import os
from dotenv import load_dotenv

##### To initialise environment variables
load_dotenv()


##### To build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


##### Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", 0)))

# Django Superuser setup
DJANGO_SUPERUSER = {
    "DJANGO_SUPERUSER_USERNAME": os.getenv("DJANGO_SUPERUSER_USERNAME"),
    "DJANGO_SUPERUSER_EMAIL": os.getenv("DJANGO_SUPERUSER_EMAIL"),
    "DJANGO_SUPERUSER_PASSWORD": os.getenv("DJANGO_SUPERUSER_PASSWORD"),
}


##### To add extra Securtiy control
# See https://www.cloudwithdjango.com/django-web-application-security-checklist/
# Cross-site Scripting (XSS)
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True

# # SSL redirect
# SECURE_SSL_REDIRECT = True

# # HTTP Strict Transport Security (HSTS)
# SECURE_HSTS_SECONDS = 86400
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# # Cross-site request forgery (CSRF) protection
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# # Django-defender configuraiton
# DEFENDER_LOGIN_FAILURE_LIMIT = 3
# DEFENDER_LOGIN_FAILURE_LIMIT_IP = 3
# DEFENDER_COOLOFF_TIME = 300
DEFENDER_REDIS_URL = "redis://redis:6379/0"


##### To set for "allowed hosts"
ALLOWED_HOSTS = []


##### To setup Application definition
INSTALLED_APPS = [
    
    # To add module for Django-admin-interface
    'admin_interface',
    'colorfield',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # To add new application
    'user',
    'product',
    'cart',
    'order',

    # To add new feature application
    'request',
    'schema_graph',
    'easyaudit',
    'login_history',
    'sslserver',
    'defender',
    'debug_toolbar',
    'storages',
    'tinymce',
    'scrapers',
    'haystack',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',

    # To add new feature middleware
    'defender.middleware.FailedLoginMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'easyaudit.middleware.easyaudit.EasyAuditMiddleware',

    'request.middleware.RequestMiddleware',
]

ROOT_URLCONF = 'auking.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auking.wsgi.application'


##### To setup Database configuration
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv("MYSQL_ENGINE"),
        'NAME': os.getenv("MYSQL_DATABASE"),
        'USER': os.getenv("MYSQL_USER"),
        'PASSWORD': os.getenv("MYSQL_PASSWORD"),
        'HOST': os.getenv("MYSQL_HOST"),
        'PORT': os.getenv("MYSQL_PORT"),
    }
}


##### To setup django authentication model - have to set this before can do migrations and migrate
AUTH_USER_MODEL = "user.User"


##### To setup Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


##### To setup Internationalization configuration
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-au'

TIME_ZONE = 'Australia/Sydney'

USE_I18N = True

# If USE_TZ = False, the |utc filter (<p>Time in UTC: {{ datetime_value|utc }}</p>) doesn't perform any conversion, 
# and the displayed time in UTC is the same as the original time in Sydney. 
USE_TZ = False


##### To configure static files and storage files location
USE_S3 = os.getenv("USE_S3")

if USE_S3:
    # Configure AWS S3
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_SIGNATURE_VERSION = os.getenv("AWS_S3_SIGNATURE_VERSION")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_S3_FILE_OVERWRITE = os.getenv("AWS_S3_FILE_OVERWRITE")

    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'

    # S3 static folder setting
    STATIC_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
    STATICFILES_STORAGE = 'auking.storageBackends.StaticStorage'

    # S3 media folder setting
    MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'auking.storageBackends.MediaStorage'


else:
    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.2/howto/static-files/
    STATIC_URL = 'static/'
    STATIC_ROOT = 'collectstatic/'
    
    # Media storage location
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


##### To setup default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


##### To setup rich text editor configuration
TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/6/tinymce.min.js'
TINYMCE_COMPRESSOR = False
TINYMCE_APIKEY = os.getenv("TINYMCE_APIKEY")

TINYMCE_DEFAULT_CONFIG = {
    "height": "320px",
    "width": "960px",
    "menubar": "file edit view insert format tools table help",
    
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
    "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
    "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
    "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
    "a11ycheck ltr rtl | showcomments addcomment code",
    
    "custom_undo_redo_levels": 10,
    
    "language": "es_ES",
    
    "skin": "oxide-dark",
}


##### To setup sending email configuration
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")


##### To setup for Django cache setting, in local machine
CACHES = {
    "default": {
        "BACKEND": os.getenv("CACHE_BACKEND"),
        "LOCATION": os.getenv("CACHE_LOCATION"),
        "OPTIONS": {
            "CLIENT_CLASS": os.getenv("CACHE_OPTIONS_CLIENT_CLASS"),
        }
    }
}


##### To configure the session storageï¼Œ
# Default location is at django database session table
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


##### To configure the login URL as the default jump address for login_required()
LOGIN_URL = '/user/login'


##### To configure the STRIPE access details
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")


##### To configure Haystack
HAYSTACK_CONNECTIONS = {
    "default": {
        "ENGINE": "haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine",
        "URL": "https://elastic:YQqSIlErG=i57zIzz5FH@localhost:9200",
        "INDEX_NAME": "productsku",
        "KWARGS": {
            "use_ssl": True,
            "verify_certs": True,
            "ca_certs": "/Users/jerryqiu/kibana-7.17.16-darwin-x86_64/config/elasticsearch-ca.pem"
        }
    },
}

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'


##### To configure DEBUG_TOOLBAR_PANELS
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    "https://auking.s3.ap-southeast-2.amazonaws.com/",
    # ...
]

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]


##### To setup logging configuration
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG', # Adjust the logging level as needed (DEBUG, INFO, WARNING, ERROR, CRITICAL)
#             'class': 'logging.StreamHandler',
#         },
#         'file': {
#             'level': 'DEBUG',  # Adjust the logging level as needed
#             'class': 'logging.FileHandler',
#             'filename': 'django.log',  # Specify the log file name
#         },
#     },
#     'root': {
#         'handlers': ['console', 'file'],  # Choose which handlers to use
#         'level': 'DEBUG',  # Adjust the logging level for the root logger
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],  # Choose which handlers to use
#             'level': 'DEBUG',  # Adjust the logging level for the 'django' logger
#             'propagate': True,
#         },
#     },
# }

# Configure ELASTICSEARCH_DSL
# ELASTICSEARCH_DSL = {
#     "default": {"hosts": "https://elastic:YQqSIlErG=i57zIzz5FH@localhost:9200",
#                 "verify_certs": "False",
#                 "ssl_assert_fingerprint": "6c4edebe6907f4048b478e52b2dbcaf7ef61c6c1fb51222a39724add42d1f500"}
# }