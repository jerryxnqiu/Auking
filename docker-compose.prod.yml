version: "3.9"

services:

  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: mysqlContainer
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysqlData:/var/lib/mysql
      - ./mysqlInitializationScripts:/mysqlInitializationScripts
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
      timeout: 20s
      retries: 10

  # Redis Service
  redis:
    image: redis:7.0.5-alpine 
    restart: always
    ports:
      - "6379:6379"
    container_name: redisContainer
    volumes:
      - redisData:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      timeout: 20s
      retries: 10

  # Django Service
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/auking
    image: django:aukingDjango
    container_name: djangoContainer
    command: /auking/entrypointDjango.sh
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Service
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/auking
    image: celery:aukingCelery
    container_name: celeryContainer
    command: /auking/entrypointCelery.sh
    restart: always
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Elasticsearch Service
  elasticsearch:
    image: elasticsearch:7.17.17
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch-docker-cluster
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    volumes:
      - elasticsearchData:/usr/share/elasticsearch/data

  # Kibana Service
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.17
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: always

  # Nginx Service
  nginx:
    image: nginx:alpine
    container_name: nginxContainer
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email jerry_qiu@hotmail.com -d auking.com.au --agree-tos
    depends_on:
      - web

# Define a named volume for MySQL data storage
volumes:
  mysqlData:
  elasticsearchData:
  redisData: